<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_2d_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Position
randomize();
x = room_width/2;
y = random(room_height - sprite_height/2);

movespeed = 12;
xdir = -1;
ydir = 1 - 2*irandom(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ball Movement

// Collide with paddle/sides or leave room
var paddle = instance_nearest(x + xdir * movespeed * (2 - abs(ydir)), y, obj_2d_paddle);
if ( place_meeting(x + xdir * movespeed * (2 - abs(ydir)), y, obj_2d_paddle) )
{
   while ( !place_meeting(x + xdir, y, obj_2d_paddle) )
      x += xdir;
   
   if (movespeed &lt; 40) movespeed += 4;
   xdir *= -1;
   
   var diff = y - paddle.y;
   
   if ( abs(diff) &lt; paddle.sprite_height/6 )
      ydir *= 0;
   else if ( diff &gt;= paddle.sprite_height/6 )
      ydir = 1;
   else
      ydir = -1;
   
   // SOUND
   switch (irandom(2))
   {
      case 0: audio_play_sound(hit1, 0, false); break;
      case 1: audio_play_sound(hit2, 0, false); break;
      case 2: audio_play_sound(hit3, 0, false); break;
   }
}
else x += xdir * movespeed * (2 - abs(ydir));

if (y + ydir * movespeed &lt; sprite_height/2 || y + ydir * movespeed &gt; room_height - sprite_height/2)
{
   while ( !(y + ydir &lt; sprite_height/2 || y + ydir &gt; room_height - sprite_height/2) )
      y += ydir;
   
   ydir *= -1;
}
else y += ydir * movespeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Ball Instance &amp;&amp; Increase Score

if (x &gt; room_width/2)
   obj_2d_score.player1++;
else
   obj_2d_score.player2++;

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
